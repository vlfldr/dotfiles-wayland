; popup volume slider
(defwindow w_volume
  :geometry (geometry :x "105px"
                      :y "42px"
                      :anchor "top right")
  :windowtype "dock"
  :stacking "fg"
  :wm-ignore false
  :monitor 0
(p_volume))

(defwidget p_volume []
  (revealer :transition "slidedown" :duration "500ms" :reveal showVolume
    (eventbox :onhover "eww update showVolume=true && eww update closeVolumeTimer=0" 
      :onhoverlost "eww update closeVolumeTimer=1" 
      (box :class "popup volume-popup"
        :orientation "v"
        (scale    :class "volume-slider" 	  
          :value curVolume
          :orientation "v"     
          :flipped true 
          :tooltip "Volume: ${curVolume}%" 
          :max 101 
          :min 0 
          :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"   
)))))

; volume icon
(defwidget volume []
	(eventbox :onhover "eww update showVolume=true"
  :onhoverlost "eww update closeVolumeTimer=1"
    (button   :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"   
      :class "tray-icon volume-icon volume-icon-${muted}" "墳 ")))
(defvar showVolume false)
(defvar closeVolumeTimer 0)
(defpoll muted :interval "0s" 
  :run-while showVolume "pactl get-sink-mute @DEFAULT_SINK@ | cut -c 7-")
(defpoll curVolume :interval "0s" 
  :run-while showVolume "pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | tr -d '%'")
(defpoll closeVolumeListener :interval "1s" 
  :run-while showVolume "python scripts/autoClose.py volume")



; popup brightness slider
(defwindow w_brightness
  :geometry (geometry :x "127px"
                      :y "42px"
                      :anchor "top right")
  :windowtype "dock"
  :stacking "fg"
  :wm-ignore false
  :monitor 0
(p_brightness))

(defwidget p_brightness []
  (revealer :transition "slidedown" :duration "500ms" :reveal showBrightness
    (eventbox :onhover "eww update showBrightness=true && eww update closeBrightnessTimer=0" 
      :onhoverlost "eww update closeVolumeTimer=1" 
      (box :class "popup brightness-popup"
        :orientation "v"
        (scale    :class "brightness-slider" 	  
          :value curBrightness
          :orientation "v"     
          :flipped true 
          :tooltip "Brightness: ${curBrightness}%" 
          :max 101 
          :min 0 
          :onchange "light -S {}"   
)))))

; brightness icon
(defwidget brightness []
	(eventbox :onhover "eww update showBrightness=true" 	
  :onhoverlost "eww update closeBrightnessTimer=1" 		
    (button  :class "tray-icon brightness-icon" "")))
(defvar showBrightness false)
(defvar closeBrightnessTimer 0)
(defpoll curBrightness :interval "0s" :run-while showBrightness "light")
(defpoll closeBrightnessListener :interval "1s" 
  :run-while showBrightness "python scripts/autoClose.py brightness")
